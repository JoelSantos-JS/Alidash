// Script para verificar transa√ß√µes de um usu√°rio espec√≠fico
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Verificar se as vari√°veis est√£o definidas
if (!supabaseUrl || !supabaseServiceKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas!');
  process.exit(1);
}

// Inicializar Supabase
const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Email do usu√°rio a verificar
const userEmail = 'davi10@gmail.com';

async function checkUserTransactions() {
  console.log(`üîç Verificando transa√ß√µes do usu√°rio: ${userEmail}\n`);
  
  try {
    // 1. Primeiro, buscar o ID do usu√°rio pelo email
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id, firebase_uid')
      .eq('email', userEmail)
      .single();
    
    if (userError) {
      console.error(`‚ùå Erro ao buscar usu√°rio ${userEmail}:`, userError.message);
      return;
    }
    
    if (!userData) {
      console.log(`‚ùå Usu√°rio ${userEmail} n√£o encontrado no Supabase`);
      return;
    }
    
    console.log(`‚úÖ Usu√°rio encontrado:`);
    console.log(`   ID: ${userData.id}`);
    console.log(`   Firebase UID: ${userData.firebase_uid || 'N/A'}`);
    
    // 2. Buscar transa√ß√µes pelo ID do usu√°rio
    const { data: transactions, error: transactionsError } = await supabase
      .from('transactions')
      .select('*')
      .eq('user_id', userData.id);
    
    if (transactionsError) {
      console.error('‚ùå Erro ao buscar transa√ß√µes:', transactionsError.message);
      return;
    }
    
    console.log(`\nüìä Total de transa√ß√µes encontradas: ${transactions?.length || 0}`);
    
    if (transactions && transactions.length > 0) {
      console.log('\nüìù √öltimas 5 transa√ß√µes:');
      
      // Mostrar apenas as 5 √∫ltimas transa√ß√µes (ou todas se forem menos de 5)
      const recentTransactions = transactions.slice(-5);
      
      recentTransactions.forEach((transaction, index) => {
        console.log(`\n${index + 1}. ID: ${transaction.id}`);
        console.log(`   Descri√ß√£o: ${transaction.description || 'N/A'}`);
        console.log(`   Valor: R$ ${parseFloat(transaction.amount).toFixed(2)}`);
        console.log(`   Data: ${transaction.date}`);
        console.log(`   Tipo: ${transaction.type}`);
        
        // Verificar se tem informa√ß√µes de parcelamento
        if (transaction.is_installment) {
          let installmentInfo;
          try {
            installmentInfo = transaction.installment_info ? 
              (typeof transaction.installment_info === 'string' ? 
                JSON.parse(transaction.installment_info) : 
                transaction.installment_info) : 
              null;
            
            if (installmentInfo) {
              console.log(`   Parcela: ${installmentInfo.currentInstallment}/${installmentInfo.totalInstallments}`);
            }
          } catch (e) {
            console.log(`   Erro ao processar informa√ß√µes de parcelamento: ${e.message}`);
          }
        }
      });
    } else {
      console.log('‚ùå Nenhuma transa√ß√£o encontrada para este usu√°rio');
    }
    
    // 3. Verificar se h√° transa√ß√µes pelo Firebase UID (fallback)
    if (userData.firebase_uid && (!transactions || transactions.length === 0)) {
      console.log('\nüîç Verificando transa√ß√µes pelo Firebase UID...');
      
      const { data: fbTransactions, error: fbTransactionsError } = await supabase
        .from('transactions')
        .select('*')
        .eq('user_id', userData.firebase_uid);
      
      if (fbTransactionsError) {
        console.error('‚ùå Erro ao buscar transa√ß√µes pelo Firebase UID:', fbTransactionsError.message);
        return;
      }
      
      console.log(`üìä Total de transa√ß√µes encontradas pelo Firebase UID: ${fbTransactions?.length || 0}`);
      
      if (fbTransactions && fbTransactions.length > 0) {
        console.log('\nüìù √öltimas 5 transa√ß√µes pelo Firebase UID:');
        
        const recentFbTransactions = fbTransactions.slice(-5);
        
        recentFbTransactions.forEach((transaction, index) => {
          console.log(`\n${index + 1}. ID: ${transaction.id}`);
          console.log(`   Descri√ß√£o: ${transaction.description || 'N/A'}`);
          console.log(`   Valor: R$ ${parseFloat(transaction.amount).toFixed(2)}`);
          console.log(`   Data: ${transaction.date}`);
          console.log(`   Tipo: ${transaction.type}`);
        });
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error.message);
  }
}

// Executar verifica√ß√£o
checkUserTransactions();