require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Vari√°veis de ambiente do Supabase n√£o encontradas');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);
const supabaseAdmin = createClient(supabaseUrl, supabaseServiceKey);

async function testLoginFlow() {
  try {
    console.log('üîê Testando login com joeltere9@gmail.com...');
    
    // Fazer login
    const { data: authData, error: authError } = await supabase.auth.signInWithPassword({
      email: 'joeltere9@gmail.com',
      password: 'joel123'
    });

    if (authError) {
      console.error('‚ùå Erro no login:', authError);
      return;
    }

    console.log('‚úÖ Login bem-sucedido:', authData.user.email);
    console.log('üÜî User ID:', authData.user.id);

    // Tentar buscar usu√°rio na tabela users
    console.log('\nüîç Buscando usu√°rio na tabela users...');
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .eq('id', authData.user.id)
      .single();

    if (userError) {
      console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado por ID:', userError.message);
      
      // Tentar buscar por email
      console.log('üîç Buscando por email...');
      const { data: userByEmail, error: emailError } = await supabase
        .from('users')
        .select('*')
        .eq('email', authData.user.email)
        .single();

      if (emailError) {
        console.log('‚ö†Ô∏è Usu√°rio n√£o encontrado por email:', emailError.message);
        
        // Tentar criar usu√°rio usando service role
        console.log('\n‚ûï Tentando criar usu√°rio com service role...');
        const { data: newUser, error: createError } = await supabaseAdmin
          .from('users')
          .insert({
            id: authData.user.id, // Use Supabase Auth ID
            email: authData.user.email,
            name: authData.user.user_metadata?.name || null,
            account_type: 'personal'
          })
          .select()
          .single();

        if (createError) {
          console.error('‚ùå Erro ao criar usu√°rio:', createError);
          console.error('üìã Detalhes completos:', JSON.stringify(createError, null, 2));
        } else {
          console.log('‚úÖ Usu√°rio criado com sucesso:', newUser);
        }
      } else {
        console.log('‚úÖ Usu√°rio encontrado por email:', userByEmail);
      }
    } else {
      console.log('‚úÖ Usu√°rio encontrado por ID:', userData);
    }

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testLoginFlow();