const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://atyeakcunmhrzzpdcvxm.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0eWVha2N1bm1ocnp6cGRjdnhtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTg3MjM0MSwiZXhwIjoyMDcxNDQ4MzQxfQ.RYbe-ygQ43m_I7COUhPmgmPmlCilCimZHSW2W7uqRkU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function executeSQL(sql) {
  try {
    const { data, error } = await supabase.rpc('exec_sql', { sql });
    if (error) {
      console.log(`‚ùå Erro: ${error.message}`);
      return false;
    }
    console.log(`‚úÖ Executado com sucesso`);
    return true;
  } catch (err) {
    console.log(`‚ùå Erro de execu√ß√£o: ${err.message}`);
    return false;
  }
}

async function fixAllPolicies() {
  console.log('üîß Iniciando corre√ß√£o de todas as pol√≠ticas RLS...\n');

  // Lista de tabelas e suas pol√≠ticas
  const tables = [
    'products',
    'sales', 
    'transactions',
    'debts',
    'debt_payments',
    'goal_milestones',
    'goal_reminders',
    'dreams',
    'bets',
    'revenues',
    'expenses',
    'goals',
    'personal_incomes'
  ];

  // 1. Remover pol√≠ticas antigas
  console.log('üóëÔ∏è Removendo pol√≠ticas antigas...');
  
  for (const table of tables) {
    console.log(`  Removendo pol√≠tica de ${table}...`);
    await executeSQL(`DROP POLICY IF EXISTS "${table}_own_data" ON ${table};`);
  }

  // Remover pol√≠ticas espec√≠ficas
  console.log('  Removendo pol√≠tica users_service_role_policy...');
  await executeSQL(`DROP POLICY IF EXISTS "users_service_role_policy" ON users;`);
  
  console.log('  Removendo pol√≠tica personal_incomes espec√≠fica...');
  await executeSQL(`DROP POLICY IF EXISTS "Users can view own personal incomes" ON personal_incomes;`);

  console.log('\n‚úÖ Pol√≠ticas antigas removidas!\n');

  // 2. Criar novas pol√≠ticas
  console.log('üÜï Criando novas pol√≠ticas...');

  for (const table of tables) {
    console.log(`  Criando pol√≠tica para ${table}...`);
    const sql = `
      CREATE POLICY "${table}_own_data" ON ${table}
      FOR ALL USING (
        auth.role() = 'service_role' OR 
        user_id = auth.uid()
      );
    `;
    await executeSQL(sql);
  }

  // Pol√≠tica espec√≠fica para users
  console.log('  Criando pol√≠tica para users...');
  await executeSQL(`
    CREATE POLICY "users_service_role_policy" ON users
    FOR ALL USING (
      auth.role() = 'service_role' OR 
      id = auth.uid()
    );
  `);

  console.log('\n‚úÖ Novas pol√≠ticas criadas!\n');

  // 3. Garantir que RLS est√° habilitado
  console.log('üîí Habilitando RLS em todas as tabelas...');
  
  const allTables = [...tables, 'users'];
  for (const table of allTables) {
    console.log(`  Habilitando RLS em ${table}...`);
    await executeSQL(`ALTER TABLE ${table} ENABLE ROW LEVEL SECURITY;`);
  }

  console.log('\n‚úÖ RLS habilitado em todas as tabelas!\n');

  // 4. Tentar remover a coluna firebase_uid
  console.log('üóëÔ∏è Tentando remover coluna firebase_uid...');
  const removeResult = await executeSQL(`ALTER TABLE users DROP COLUMN IF EXISTS firebase_uid;`);
  
  if (removeResult) {
    console.log('‚úÖ Coluna firebase_uid removida com sucesso!');
  } else {
    console.log('‚ö†Ô∏è N√£o foi poss√≠vel remover a coluna firebase_uid automaticamente.');
    console.log('üìù Execute manualmente no painel do Supabase:');
    console.log('   ALTER TABLE users DROP COLUMN IF EXISTS firebase_uid;');
  }

  console.log('\nüéâ Processo conclu√≠do!');
  console.log('\nüìã RESUMO:');
  console.log('=====================================');
  console.log('‚úÖ Pol√≠ticas antigas removidas');
  console.log('‚úÖ Novas pol√≠ticas criadas (sem firebase_uid)');
  console.log('‚úÖ RLS habilitado em todas as tabelas');
  console.log('‚úÖ Service role mant√©m acesso total');
  console.log('‚úÖ Usu√°rios acessam apenas seus pr√≥prios dados');
}

// Executar corre√ß√£o
fixAllPolicies().catch(console.error);