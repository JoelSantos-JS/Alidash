#!/usr/bin/env node

/**
 * Script de Verifica√ß√£o Pr√©-Deploy
 * Detecta problemas comuns antes do deploy para evitar erros em produ√ß√£o
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üîç Iniciando verifica√ß√£o pr√©-deploy...\n');

// Cores para output
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

let hasErrors = false;
let hasWarnings = false;

function logSuccess(message) {
  console.log(`${colors.green}‚úÖ ${message}${colors.reset}`);
}

function logError(message) {
  console.log(`${colors.red}‚ùå ${message}${colors.reset}`);
  hasErrors = true;
}

function logWarning(message) {
  console.log(`${colors.yellow}‚ö†Ô∏è  ${message}${colors.reset}`);
  hasWarnings = true;
}

function logInfo(message) {
  console.log(`${colors.blue}‚ÑπÔ∏è  ${message}${colors.reset}`);
}

// 1. Verificar vari√°veis de ambiente essenciais
function checkEnvironmentVariables() {
  logInfo('Verificando vari√°veis de ambiente...');
  
  const requiredEnvVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'NEXT_PUBLIC_SUPABASE_ANON_KEY',
    'SUPABASE_SERVICE_ROLE_KEY',
    'NEXT_PUBLIC_FIREBASE_API_KEY',
    'NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN',
    'NEXT_PUBLIC_FIREBASE_PROJECT_ID'
  ];

  const envFile = path.join(process.cwd(), '.env.local');
  
  if (!fs.existsSync(envFile)) {
    logError('Arquivo .env.local n√£o encontrado');
    return;
  }

  const envContent = fs.readFileSync(envFile, 'utf8');
  
  requiredEnvVars.forEach(varName => {
    if (envContent.includes(`${varName}=`) && !envContent.includes(`${varName}=placeholder`)) {
      logSuccess(`${varName} configurada`);
    } else {
      logError(`${varName} n√£o configurada ou usando placeholder`);
    }
  });
}

// 2. Verificar build do Next.js
function checkBuild() {
  logInfo('Verificando build do Next.js...');
  
  try {
    // Limpar cache antes do build
    if (fs.existsSync('.next')) {
      // Cross-platform solution for removing directory
      const isWindows = process.platform === 'win32';
      const rmCommand = isWindows ? 'rmdir /s /q .next' : 'rm -rf .next';
      execSync(rmCommand, { stdio: 'pipe' });
      logSuccess('Cache .next limpo');
    }

    // Executar build
    execSync('npm run build', { stdio: 'pipe' });
    logSuccess('Build executado com sucesso');

    // Verificar se os arquivos foram gerados
    const buildDir = path.join(process.cwd(), '.next');
    if (fs.existsSync(buildDir)) {
      const staticDir = path.join(buildDir, 'static');
      if (fs.existsSync(staticDir)) {
        logSuccess('Arquivos est√°ticos gerados');
      } else {
        logError('Diret√≥rio de arquivos est√°ticos n√£o encontrado');
      }
    } else {
      logError('Diret√≥rio .next n√£o encontrado ap√≥s build');
    }

  } catch (error) {
    logError(`Falha no build: ${error.message}`);
  }
}

// 3. Verificar configura√ß√£o do Firebase
function checkFirebaseConfig() {
  logInfo('Verificando configura√ß√£o do Firebase...');
  
  const firebaseConfigFile = path.join(process.cwd(), 'src', 'lib', 'firebase.ts');
  
  if (fs.existsSync(firebaseConfigFile)) {
    const content = fs.readFileSync(firebaseConfigFile, 'utf8');
    
    if (content.includes('placeholder') || content.includes('your-')) {
      logError('Configura√ß√£o do Firebase cont√©m placeholders');
    } else {
      logSuccess('Configura√ß√£o do Firebase parece v√°lida');
    }
  } else {
    logWarning('Arquivo de configura√ß√£o do Firebase n√£o encontrado');
  }
}

// 4. Verificar depend√™ncias
function checkDependencies() {
  logInfo('Verificando depend√™ncias...');
  
  try {
    execSync('npm audit --audit-level=high', { stdio: 'pipe' });
    logSuccess('Nenhuma vulnerabilidade cr√≠tica encontrada');
  } catch (error) {
    logWarning('Vulnerabilidades encontradas nas depend√™ncias');
  }

  // Verificar se node_modules existe
  if (fs.existsSync('node_modules')) {
    logSuccess('node_modules presente');
  } else {
    logError('node_modules n√£o encontrado - execute npm install');
  }
}

// 5. Verificar configura√ß√£o do Vercel
function checkVercelConfig() {
  logInfo('Verificando configura√ß√£o do Vercel...');
  
  const vercelConfigFile = path.join(process.cwd(), 'vercel.json');
  
  if (fs.existsSync(vercelConfigFile)) {
    logSuccess('Arquivo vercel.json encontrado');
  } else {
    logWarning('Arquivo vercel.json n√£o encontrado (opcional)');
  }

  // Verificar se h√° configura√ß√µes de dom√≠nio
  logInfo('Lembre-se de configurar os dom√≠nios autorizados:');
  console.log('  - Firebase Console: Adicionar dom√≠nio de produ√ß√£o');
  console.log('  - Supabase Dashboard: Configurar URL do site');
}

// 6. Verificar tamanho do bundle
function checkBundleSize() {
  logInfo('Verificando tamanho do bundle...');
  
  try {
    const buildManifest = path.join(process.cwd(), '.next', 'build-manifest.json');
    if (fs.existsSync(buildManifest)) {
      const manifest = JSON.parse(fs.readFileSync(buildManifest, 'utf8'));
      const pages = Object.keys(manifest.pages);
      
      if (pages.length > 0) {
        logSuccess(`${pages.length} p√°ginas encontradas no build`);
      } else {
        logWarning('Nenhuma p√°gina encontrada no build manifest');
      }
    }
  } catch (error) {
    logWarning('N√£o foi poss√≠vel verificar o build manifest');
  }
}

// Executar todas as verifica√ß√µes
async function runAllChecks() {
  console.log('üöÄ Verifica√ß√£o Pr√©-Deploy - Alidash\n');
  
  checkEnvironmentVariables();
  console.log('');
  
  checkDependencies();
  console.log('');
  
  checkFirebaseConfig();
  console.log('');
  
  checkBuild();
  console.log('');
  
  checkBundleSize();
  console.log('');
  
  checkVercelConfig();
  console.log('');

  // Resumo final
  console.log('üìã RESUMO DA VERIFICA√á√ÉO:');
  console.log('========================');
  
  if (hasErrors) {
    logError('Erros encontrados - N√ÉO FA√áA DEPLOY');
    console.log('\nüîß Corrija os erros acima antes de fazer deploy');
    process.exit(1);
  } else if (hasWarnings) {
    logWarning('Avisos encontrados - Deploy com cuidado');
    console.log('\n‚ö†Ô∏è  Considere corrigir os avisos antes do deploy');
  } else {
    logSuccess('Tudo OK - Pronto para deploy!');
    console.log('\nüéâ Sua aplica√ß√£o est√° pronta para produ√ß√£o');
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  runAllChecks().catch(console.error);
}

module.exports = { runAllChecks };