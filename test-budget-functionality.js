require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

console.log('üîß Configura√ß√£o do Supabase:');
console.log('   URL:', process.env.NEXT_PUBLIC_SUPABASE_URL ? 'Configurada' : 'N√£o configurada');
console.log('   Service Key:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'Configurada' : 'N√£o configurada');

async function testBudgetFunctionality() {
  console.log('üß™ Testando funcionalidade do or√ßamento...\n');

  try {
    // 1. Buscar um usu√°rio existente
    console.log('1Ô∏è‚É£ Buscando usu√°rios existentes...');
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, email')
      .limit(1);

    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
      return;
    }

    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado. Criando usu√°rio de teste...');
      
      const { data: newUser, error: createUserError } = await supabase
        .from('users')
        .insert({
          email: 'teste@budget.com',
          firebase_uid: 'test-budget-uid-' + Date.now()
        })
        .select()
        .single();

      if (createUserError) {
        console.error('‚ùå Erro ao criar usu√°rio:', createUserError);
        return;
      }

      users.push(newUser);
    }

    const testUser = users[0];
    console.log('‚úÖ Usu√°rio de teste:', testUser.email, '(ID:', testUser.id + ')');

    // 2. Testar busca de or√ßamento (GET)
    console.log('\n2Ô∏è‚É£ Testando busca de or√ßamento...');
    const getResponse = await fetch(`http://localhost:3001/api/budgets?user_id=${testUser.id}`);
    const getResult = await getResponse.json();
    
    console.log('üìä Resposta GET:', getResult);

    // 3. Testar atualiza√ß√£o de or√ßamento (PUT)
    console.log('\n3Ô∏è‚É£ Testando atualiza√ß√£o de or√ßamento...');
    const newBudgetValue = 1500.00;
    
    const putResponse = await fetch('http://localhost:3001/api/budgets', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: testUser.id,
        monthly_budget: newBudgetValue
      })
    });

    const putResult = await putResponse.json();
    console.log('üìù Resposta PUT:', putResult);

    // 4. Verificar se a atualiza√ß√£o foi persistida
    console.log('\n4Ô∏è‚É£ Verificando persist√™ncia da atualiza√ß√£o...');
    const verifyResponse = await fetch(`http://localhost:3001/api/budgets?user_id=${testUser.id}`);
    const verifyResult = await verifyResponse.json();
    
    console.log('üîç Verifica√ß√£o:', verifyResult);

    if (verifyResult.budget && verifyResult.budget.monthly_budget === newBudgetValue) {
      console.log('‚úÖ Or√ßamento atualizado com sucesso!');
    } else {
      console.log('‚ùå Or√ßamento n√£o foi atualizado corretamente');
      console.log('   Esperado:', newBudgetValue);
      console.log('   Recebido:', verifyResult.budget?.monthly_budget);
    }

    // 5. Testar com valor inv√°lido
    console.log('\n5Ô∏è‚É£ Testando valida√ß√£o com valor inv√°lido...');
    const invalidResponse = await fetch('http://localhost:3001/api/budgets', {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        user_id: testUser.id,
        monthly_budget: -100
      })
    });

    const invalidResult = await invalidResponse.json();
    console.log('‚ö†Ô∏è Teste de valida√ß√£o:', invalidResult);

    if (invalidResponse.status === 400) {
      console.log('‚úÖ Valida√ß√£o funcionando corretamente');
    } else {
      console.log('‚ùå Valida√ß√£o n√£o est√° funcionando');
    }

    console.log('\nüéâ Teste conclu√≠do!');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

// Executar o teste
testBudgetFunctionality();