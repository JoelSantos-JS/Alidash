const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function testDataSeparation() {
  console.log('üîí Testando Separa√ß√£o de Dados entre Contas Pessoais e Empresariais...\n');

  try {
    // 1. Buscar usu√°rios de teste
    console.log('1Ô∏è‚É£ Buscando usu√°rios de teste...');
    
    const { data: personalUser } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'teste.pessoal@example.com')
      .single();

    const { data: businessUser } = await supabase
      .from('users')
      .select('*')
      .eq('email', 'teste.empresa@example.com')
      .single();

    if (!personalUser || !businessUser) {
      console.log('‚ùå Usu√°rios de teste n√£o encontrados. Execute os testes anteriores primeiro.');
      return;
    }

    console.log('‚úÖ Usu√°rios encontrados:');
    console.log(`   üë§ Pessoal: ${personalUser.name} (${personalUser.account_type})`);
    console.log(`   üè¢ Empresarial: ${businessUser.name} (${businessUser.account_type})`);

    // 2. Verificar separa√ß√£o de receitas pessoais
    console.log('\n2Ô∏è‚É£ Verificando separa√ß√£o de receitas pessoais...');
    
    const { data: personalIncomes } = await supabase
      .from('personal_incomes')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessIncomes } = await supabase
      .from('personal_incomes')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Receitas pessoais do usu√°rio pessoal: ${personalIncomes?.length || 0}`);
    console.log(`‚úÖ Receitas pessoais do usu√°rio empresarial: ${businessIncomes?.length || 0}`);

    // 3. Verificar separa√ß√£o de produtos (s√≥ empresarial)
    console.log('\n3Ô∏è‚É£ Verificando separa√ß√£o de produtos...');
    
    const { data: personalProducts } = await supabase
      .from('products')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessProducts } = await supabase
      .from('products')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Produtos do usu√°rio pessoal: ${personalProducts?.length || 0}`);
    console.log(`‚úÖ Produtos do usu√°rio empresarial: ${businessProducts?.length || 0}`);

    // 4. Verificar separa√ß√£o de vendas
    console.log('\n4Ô∏è‚É£ Verificando separa√ß√£o de vendas...');
    
    const { data: personalSales } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessSales } = await supabase
      .from('sales')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Vendas do usu√°rio pessoal: ${personalSales?.length || 0}`);
    console.log(`‚úÖ Vendas do usu√°rio empresarial: ${businessSales?.length || 0}`);

    // 5. Verificar separa√ß√£o de receitas empresariais
    console.log('\n5Ô∏è‚É£ Verificando separa√ß√£o de receitas empresariais...');
    
    const { data: personalRevenues } = await supabase
      .from('revenues')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessRevenues } = await supabase
      .from('revenues')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Receitas empresariais do usu√°rio pessoal: ${personalRevenues?.length || 0}`);
    console.log(`‚úÖ Receitas empresariais do usu√°rio empresarial: ${businessRevenues?.length || 0}`);

    // 6. Verificar separa√ß√£o de despesas empresariais
    console.log('\n6Ô∏è‚É£ Verificando separa√ß√£o de despesas empresariais...');
    
    const { data: personalExpenses } = await supabase
      .from('expenses')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessExpenses } = await supabase
      .from('expenses')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Despesas empresariais do usu√°rio pessoal: ${personalExpenses?.length || 0}`);
    console.log(`‚úÖ Despesas empresariais do usu√°rio empresarial: ${businessExpenses?.length || 0}`);

    // 7. Verificar separa√ß√£o de metas
    console.log('\n7Ô∏è‚É£ Verificando separa√ß√£o de metas...');
    
    const { data: personalGoals } = await supabase
      .from('goals')
      .select('*')
      .eq('user_id', personalUser.id);

    const { data: businessGoals } = await supabase
      .from('goals')
      .select('*')
      .eq('user_id', businessUser.id);

    console.log(`‚úÖ Metas do usu√°rio pessoal: ${personalGoals?.length || 0}`);
    console.log(`‚úÖ Metas do usu√°rio empresarial: ${businessGoals?.length || 0}`);

    // 8. Resumo da separa√ß√£o
    console.log('\n8Ô∏è‚É£ Resumo da Separa√ß√£o de Dados:');
    console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
    console.log('‚îÇ                    SEPARA√á√ÉO DE DADOS                       ‚îÇ');
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log(`‚îÇ Tabela              ‚îÇ Pessoal ‚îÇ Empresarial ‚îÇ Separado?     ‚îÇ`);
    console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
    console.log(`‚îÇ personal_incomes    ‚îÇ    ${(personalIncomes?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessIncomes?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalIncomes?.length !== businessIncomes?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log(`‚îÇ products            ‚îÇ    ${(personalProducts?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessProducts?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalProducts?.length !== businessProducts?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log(`‚îÇ sales               ‚îÇ    ${(personalSales?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessSales?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalSales?.length !== businessSales?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log(`‚îÇ revenues            ‚îÇ    ${(personalRevenues?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessRevenues?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalRevenues?.length !== businessRevenues?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log(`‚îÇ expenses            ‚îÇ    ${(personalExpenses?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessExpenses?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalExpenses?.length !== businessExpenses?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log(`‚îÇ goals               ‚îÇ    ${(personalGoals?.length || 0).toString().padStart(2)}   ‚îÇ      ${(businessGoals?.length || 0).toString().padStart(2)}    ‚îÇ     ${personalGoals?.length !== businessGoals?.length ? '‚úÖ' : '‚ùì'}      ‚îÇ`);
    console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');

    // 9. Verificar se h√° vazamento de dados
    console.log('\n9Ô∏è‚É£ Verificando vazamento de dados...');
    
    let hasDataLeakage = false;
    
    // Verificar se usu√°rio pessoal tem dados empresariais
    if (personalProducts?.length > 0 || personalSales?.length > 0 || personalRevenues?.length > 0 || personalExpenses?.length > 0) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Usu√°rio pessoal possui dados empresariais!');
      hasDataLeakage = true;
    }
    
    // Verificar se usu√°rio empresarial tem dados pessoais
    if (businessIncomes?.length > 0) {
      console.log('‚ö†Ô∏è  ATEN√á√ÉO: Usu√°rio empresarial possui dados pessoais!');
      hasDataLeakage = true;
    }

    if (!hasDataLeakage) {
      console.log('‚úÖ Nenhum vazamento de dados detectado!');
      console.log('‚úÖ A separa√ß√£o entre contas pessoais e empresariais est√° funcionando corretamente!');
    }

    console.log('\nüéØ Teste de separa√ß√£o de dados conclu√≠do!');
    
    return {
      personalUser,
      businessUser,
      separation: {
        personal_incomes: { personal: personalIncomes?.length || 0, business: businessIncomes?.length || 0 },
        products: { personal: personalProducts?.length || 0, business: businessProducts?.length || 0 },
        sales: { personal: personalSales?.length || 0, business: businessSales?.length || 0 },
        revenues: { personal: personalRevenues?.length || 0, business: businessRevenues?.length || 0 },
        expenses: { personal: personalExpenses?.length || 0, business: businessExpenses?.length || 0 },
        goals: { personal: personalGoals?.length || 0, business: businessGoals?.length || 0 }
      },
      hasDataLeakage
    };

  } catch (error) {
    console.error('‚ùå Erro durante o teste de separa√ß√£o:', error);
  }
}

// Executar teste
testDataSeparation();