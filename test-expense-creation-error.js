require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');

// Configura√ß√£o do Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function testExpenseCreationError() {
  console.log('üß™ Testando cria√ß√£o de despesa para reproduzir erro...');
  
  try {
    // 1. Buscar um usu√°rio de teste
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('id, firebase_uid, email')
      .limit(1);
    
    if (usersError) {
      console.error('‚ùå Erro ao buscar usu√°rios:', usersError);
      return;
    }
    
    if (!users || users.length === 0) {
      console.log('‚ö†Ô∏è Nenhum usu√°rio encontrado');
      return;
    }
    
    const testUser = users[0];
    console.log(`üë§ Usando usu√°rio: ${testUser.email} (ID: ${testUser.id})`);
    
    // 2. Tentar criar uma despesa com dados v√°lidos
    console.log('\nüìù Teste 1: Criando despesa com dados v√°lidos...');
    const validExpenseData = {
      user_id: testUser.id,
      date: new Date().toISOString().split('T')[0],
      description: 'Teste de despesa v√°lida',
      amount: 100.50,
      category: 'Alimenta√ß√£o',
      type: 'other',
      supplier: 'Teste Supplier',
      notes: 'Despesa de teste'
    };
    
    const { data: validExpense, error: validError } = await supabase
      .from('expenses')
      .insert(validExpenseData)
      .select()
      .single();
    
    if (validError) {
      console.error('‚ùå Erro ao criar despesa v√°lida:', validError);
      console.log('Detalhes do erro:', JSON.stringify(validError, null, 2));
    } else {
      console.log('‚úÖ Despesa v√°lida criada:', validExpense.id);
      
      // Limpar a despesa de teste
      await supabase.from('expenses').delete().eq('id', validExpense.id);
      console.log('üßπ Despesa de teste removida');
    }
    
    // 3. Tentar criar uma despesa com dados inv√°lidos para reproduzir erro
    console.log('\nüìù Teste 2: Criando despesa com dados inv√°lidos...');
    const invalidExpenseData = {
      user_id: testUser.id,
      date: 'data-inv√°lida',
      description: null, // Campo obrigat√≥rio nulo
      amount: 'n√£o-√©-n√∫mero',
      category: 'Categoria Inexistente',
      type: 'tipo-inv√°lido'
    };
    
    const { data: invalidExpense, error: invalidError } = await supabase
      .from('expenses')
      .insert(invalidExpenseData)
      .select()
      .single();
    
    if (invalidError) {
      console.error('‚ùå Erro esperado ao criar despesa inv√°lida:', invalidError);
      console.log('Detalhes do erro:', JSON.stringify(invalidError, null, 2));
      console.log('Tipo do erro:', typeof invalidError);
      console.log('Erro como string:', String(invalidError));
    } else {
      console.log('‚ö†Ô∏è Despesa inv√°lida foi criada (n√£o deveria):', invalidExpense.id);
    }
    
    // 4. Testar com usu√°rio inexistente
    console.log('\nüìù Teste 3: Criando despesa com usu√°rio inexistente...');
    const nonExistentUserData = {
      user_id: 'usuario-inexistente-123',
      date: new Date().toISOString().split('T')[0],
      description: 'Teste com usu√°rio inexistente',
      amount: 50.00,
      category: 'Teste',
      type: 'other'
    };
    
    const { data: nonExistentExpense, error: nonExistentError } = await supabase
      .from('expenses')
      .insert(nonExistentUserData)
      .select()
      .single();
    
    if (nonExistentError) {
      console.error('‚ùå Erro esperado com usu√°rio inexistente:', nonExistentError);
      console.log('Detalhes do erro:', JSON.stringify(nonExistentError, null, 2));
    } else {
      console.log('‚ö†Ô∏è Despesa com usu√°rio inexistente foi criada:', nonExistentExpense.id);
    }
    
    // 5. Verificar estrutura da tabela expenses
    console.log('\nüìã Verificando estrutura da tabela expenses...');
    const { data: sampleExpense, error: structureError } = await supabase
      .from('expenses')
      .select('*')
      .limit(1);
    
    if (structureError) {
      console.error('‚ùå Erro ao verificar estrutura:', structureError);
    } else if (sampleExpense && sampleExpense.length > 0) {
      console.log('üìã Campos dispon√≠veis na tabela expenses:');
      Object.keys(sampleExpense[0]).forEach(key => {
        console.log(`  - ${key}: ${typeof sampleExpense[0][key]} = ${sampleExpense[0][key]}`);
      });
    } else {
      console.log('‚ö†Ô∏è Nenhuma despesa encontrada na tabela');
    }
    
  } catch (error) {
    console.error('‚ùå Erro geral no teste:', error);
    console.log('Tipo do erro:', typeof error);
    console.log('Erro como string:', String(error));
    console.log('Erro como JSON:', JSON.stringify(error, null, 2));
  }
}

testExpenseCreationError().catch(console.error);