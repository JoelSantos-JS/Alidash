const { createClient } = require('@supabase/supabase-js');

// Configura√ß√µes do Supabase
const supabaseUrl = 'https://atyeakcunmhrzzpdcvxm.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImF0eWVha2N1bm1ocnp6cGRjdnhtIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTg3MjM0MSwiZXhwIjoyMDcxNDQ4MzQxfQ.RYbe-ygQ43m_I7COUhPmgmPmlCilCimZHSW2W7uqRkU';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function verifyPoliciesFixed() {
  console.log('üîç Verificando se as pol√≠ticas foram corrigidas...\n');

  // Lista de tabelas para testar
  const tables = [
    'users',
    'products',
    'sales', 
    'transactions',
    'debts',
    'debt_payments',
    'goal_milestones',
    'goal_reminders',
    'dreams',
    'bets',
    'revenues',
    'expenses',
    'goals',
    'personal_incomes'
  ];

  let allTablesWorking = true;

  // 1. Verificar se a coluna firebase_uid foi removida da tabela users
  console.log('üîç Verificando se firebase_uid foi removida da tabela users...');
  try {
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('*')
      .limit(1);

    if (userError) {
      console.log(`‚ùå Erro ao acessar tabela users: ${userError.message}`);
      allTablesWorking = false;
    } else {
      if (userData && userData.length > 0) {
        const hasFirebaseUid = 'firebase_uid' in userData[0];
        if (hasFirebaseUid) {
          console.log('‚ö†Ô∏è Coluna firebase_uid ainda existe na tabela users');
        } else {
          console.log('‚úÖ Coluna firebase_uid foi removida da tabela users');
        }
      } else {
        console.log('üìä Tabela users est√° vazia - n√£o √© poss√≠vel verificar colunas');
        
        // Tentar inserir um usu√°rio de teste para verificar a estrutura
        const testUserId = '550e8400-e29b-41d4-a716-446655440001';
        const { data: insertData, error: insertError } = await supabase
          .from('users')
          .insert({
            id: testUserId,
            email: 'test-structure@example.com',
            name: 'Test Structure User'
          })
          .select();

        if (insertError) {
          console.log(`‚ùå Erro ao inserir usu√°rio de teste: ${insertError.message}`);
        } else {
          const hasFirebaseUid = 'firebase_uid' in insertData[0];
          if (hasFirebaseUid) {
            console.log('‚ö†Ô∏è Coluna firebase_uid ainda existe na tabela users');
          } else {
            console.log('‚úÖ Coluna firebase_uid foi removida da tabela users');
          }
          
          // Remover usu√°rio de teste
          await supabase.from('users').delete().eq('id', testUserId);
        }
      }
    }
  } catch (error) {
    console.log(`‚ùå Erro ao verificar tabela users: ${error.message}`);
    allTablesWorking = false;
  }

  console.log('\nüîç Verificando acesso √†s tabelas...');

  // 2. Verificar se todas as tabelas est√£o acess√≠veis
  for (const table of tables) {
    try {
      console.log(`  Testando ${table}...`);
      const { data, error } = await supabase
        .from(table)
        .select('*')
        .limit(1);

      if (error) {
        console.log(`    ‚ùå Erro: ${error.message}`);
        allTablesWorking = false;
      } else {
        console.log(`    ‚úÖ Acess√≠vel`);
      }
    } catch (error) {
      console.log(`    ‚ùå Erro de conex√£o: ${error.message}`);
      allTablesWorking = false;
    }
  }

  console.log('\nüìä RESULTADO DA VERIFICA√á√ÉO:');
  console.log('=====================================');
  
  if (allTablesWorking) {
    console.log('‚úÖ Todas as tabelas est√£o acess√≠veis');
    console.log('‚úÖ Pol√≠ticas RLS est√£o funcionando');
    console.log('‚úÖ Service role tem acesso total');
    console.log('‚úÖ Sistema pronto para uso');
    
    console.log('\nüéâ SUCESSO! Todas as corre√ß√µes foram aplicadas com sucesso!');
    console.log('\nüìã PR√ìXIMOS PASSOS:');
    console.log('1. Teste a aplica√ß√£o para garantir que tudo funciona');
    console.log('2. Verifique se o login de usu√°rios est√° funcionando');
    console.log('3. Confirme que os dados s√£o filtrados corretamente por usu√°rio');
    
  } else {
    console.log('‚ùå Algumas tabelas ainda t√™m problemas');
    console.log('‚ö†Ô∏è Verifique se todas as pol√≠ticas foram aplicadas corretamente');
    console.log('\nüìù A√á√ïES NECESS√ÅRIAS:');
    console.log('1. Execute manualmente o arquivo fix-all-firebase-uid-policies.sql');
    console.log('2. Verifique se todas as pol√≠ticas foram criadas');
    console.log('3. Execute este script novamente para verificar');
  }

  console.log('\n=====================================');
}

// Executar verifica√ß√£o
verifyPoliciesFixed().catch(console.error);